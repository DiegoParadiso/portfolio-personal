---
// Dashboard component for managing books and movies
const TMDB_API_KEY = import.meta.env.TMDB_API_KEY || '';
---

<div class="dashboard" data-tmdb-api-key={TMDB_API_KEY}>
  <header class="dashboard-header">
    <button id="logoutBtn" class="logout-btn">Cerrar Sesión</button>
  </header>

  <div class="dashboard-content">
    <div class="dashboard-grid">
      <!-- Books Section -->
      <section class="dashboard-section">
        <div class="section-header">
          <h2>Nuevo Libro</h2>
          <div class="header-actions">
            <button class="search-btn" data-type="book">Buscar</button>
            <button class="add-btn" data-type="book">+ Agregar Manual</button>
          </div>
        </div>
        <div class="items-list" id="booksList">
          <!-- Books will be dynamically added here -->
        </div>
      </section>

      <!-- Movies Section -->
      <section class="dashboard-section">
        <div class="section-header">
          <h2>Nueva Película</h2>
          <div class="header-actions">
            <button class="search-btn" data-type="movie">Buscar</button>
            <button class="add-btn" data-type="movie">+ Agregar Manual</button>
          </div>
        </div>
        <div class="items-list" id="moviesList">
          <!-- Movies will be dynamically added here -->
        </div>
      </section>
    </div>
  </div>
</div>

<!-- Search Modal -->
<div id="searchModal" class="modal" style="display: none;">
  <div class="modal-content">
    <div class="modal-header">
      <h3 id="searchModalTitle">Buscar</h3>
      <button class="close-btn" id="closeSearchModal">&times;</button>
    </div>
    <div class="search-container">
      <div class="search-input-group">
        <input type="text" id="searchInput" placeholder="Buscar libros o películas..." />
        <button id="searchBtn" class="search-submit-btn">Buscar</button>
      </div>
      <div id="searchResults" class="search-results">
        <!-- Search results will appear here -->
      </div>
    </div>
  </div>
</div>

<!-- Modal for adding items -->
<div id="addModal" class="modal" style="display: none;">
  <div class="modal-content">
    <div class="modal-header">
      <h3 id="modalTitle">Agregar Item</h3>
      <button class="close-btn" id="closeModal">&times;</button>
    </div>
    <form id="addForm">
      <div class="form-group">
        <label for="itemTitle">Título</label>
        <input type="text" id="itemTitle" name="title" required />
      </div>
      <div class="form-group">
        <label for="itemAuthor">Autor/Director</label>
        <input type="text" id="itemAuthor" name="author" required />
      </div>
      <div class="form-group">
        <label for="itemYear">Año</label>
        <input type="number" id="itemYear" name="year" min="1900" max="2030" required />
      </div>
      <div class="form-group">
        <label for="itemDescription">Descripción</label>
        <textarea id="itemDescription" name="description" rows="3"></textarea>
      </div>
      <div class="form-group">
        <label>Calificación</label>
        <div class="star-rating" id="starRating">
          <span class="star" data-rating="1">★</span>
          <span class="star" data-rating="2">★</span>
          <span class="star" data-rating="3">★</span>
          <span class="star" data-rating="4">★</span>
          <span class="star" data-rating="5">★</span>
        </div>
        <input type="hidden" id="itemRating" name="rating" value="0" />
      </div>
      <div class="form-group">
        <label for="itemCover">Portada (URL)</label>
        <input type="text" id="itemCover" name="cover" placeholder="https://..." />
      </div>
      <div class="form-actions">
        <button type="button" class="cancel-btn" id="cancelBtn">Cancelar</button>
        <button type="submit" class="save-btn">Guardar</button>
      </div>
    </form>
  </div>
</div>

<script>
  // @ts-nocheck
  // Check if user is logged in
  if (!sessionStorage.getItem('adminLoggedIn')) {
    window.location.href = '/admin';
  }

  // Get API key from data attribute
  const dashboardElement = document.querySelector('.dashboard');
  const TMDB_API_KEY = dashboardElement?.getAttribute('data-tmdb-api-key') || '';

  // Dashboard functionality
  let currentType = 'book';
  let currentSearchType = 'book';
  let items = {
    books: JSON.parse(localStorage.getItem('adminBooks') || '[]'),
    movies: JSON.parse(localStorage.getItem('adminMovies') || '[]')
  };

  // Helper function to get items by type
  function getItemsByType(type) {
    return type === 'book' ? items.books : items.movies;
  }

  // Helper function to set items by type
  function setItemsByType(type, newItems) {
    if (type === 'book') {
      items.books = newItems;
    } else {
      items.movies = newItems;
    }
  }

  // API Keys - You can get these from the respective services
  const API_KEYS = {
    // Get your free API key from https://www.themoviedb.org/settings/api
    TMDB_API_KEY: TMDB_API_KEY, // Uses environment variable from server
    // Open Library doesn't require an API key
  };
  
  // Debug: Check if API key is loaded
  console.log('TMDB API Key loaded:', API_KEYS.TMDB_API_KEY ? 'Yes' : 'No');
  console.log('API Key value:', API_KEYS.TMDB_API_KEY); 

  // Load existing items
  function loadItems() {
    loadBooks();
    loadMovies();
  }

  function loadBooks() {
    const booksList = document.getElementById('booksList');
    if (!booksList) return;
    booksList.innerHTML = items.books.map((book, index) => `
      <div class="item-card">
        <div class="item-info">
          ${book.cover ? `<img src="${book.cover}" class="item-cover-mini" alt="${book.title} portada" />` : ''}
          <h4>${book.title}</h4>
          <p><strong>Autor:</strong> ${book.author}</p>
          <p><strong>Año:</strong> ${book.year}</p>
          ${book.description ? `<p><strong>Descripción:</strong> ${book.description}</p>` : ''}
          <div class="item-rating-static">${renderStarRating(book.rating)}</div>
        </div>
        <div class="item-actions">
          <button class="edit-btn" onclick="editItem('book', ${index})">Editar</button>
          <button class="delete-btn" onclick="deleteItem('book', ${index})">Eliminar</button>
        </div>
      </div>
    `).join('');
  }

  function loadMovies() {
    const moviesList = document.getElementById('moviesList');
    if (!moviesList) return;
    moviesList.innerHTML = items.movies.map((movie, index) => `
      <div class="item-card">
        <div class="item-info">
          ${movie.cover ? `<img src="${movie.cover}" class="item-cover-mini" alt="${movie.title} portada" />` : ''}
          <h4>${movie.title}</h4>
          <p><strong>Director:</strong> ${movie.author}</p>
          <p><strong>Año:</strong> ${movie.year}</p>
          ${movie.description ? `<p><strong>Descripción:</strong> ${movie.description}</p>` : ''}
          <div class="item-rating-static">${renderStarRating(movie.rating)}</div>
        </div>
        <div class="item-actions">
          <button class="edit-btn" onclick="editItem('movie', ${index})">Editar</button>
          <button class="delete-btn" onclick="deleteItem('movie', ${index})">Eliminar</button>
        </div>
      </div>
    `).join('');
  }

  function renderStarRating(rating) {
    // Ensure we have a valid rating
    const ratingValue = rating || '0';
    const filled = Math.max(0, Math.min(5, parseInt(ratingValue, 10) || 0));
    console.log('Rendering star rating:', rating, 'parsed as:', filled);
    let html = '';
    for (let i = 1; i <= 5; i++) {
      html += `<span class="star-static${i <= filled ? ' active' : ''}">★</span>`;
    }
    return html;
  }

  // Search functions
  async function searchBooks(query) {
    try {
      const response = await fetch(`https://openlibrary.org/search.json?q=${encodeURIComponent(query)}&limit=10`);
      const data = await response.json();
      return data.docs.map((book) => ({
        title: book.title,
        author: book.author_name ? book.author_name.join(', ') : 'Autor desconocido',
        year: book.first_publish_year || 'Año desconocido',
        description: book.first_sentence && Array.isArray(book.first_sentence) ? book.first_sentence[0] : '',
        cover: book.cover_i ? `https://covers.openlibrary.org/b/id/${book.cover_i}-M.jpg` : null
      }));
    } catch (error) {
      console.error('Error searching books:', error);
      return [];
    }
  }

  async function searchMovies(query) {
    try {
      // Check if API key is set
      if (!API_KEYS.TMDB_API_KEY || API_KEYS.TMDB_API_KEY === 'YOUR_TMDB_API_KEY_HERE') {
        console.warn('TMDB API key not configured. Please set your API key in the Dashboard.astro file.');
        return [];
      }
      
      const response = await fetch(`https://api.themoviedb.org/3/search/movie?api_key=${API_KEYS.TMDB_API_KEY}&query=${encodeURIComponent(query)}&language=es-ES`);
      
      if (!response.ok) {
        throw new Error(`API request failed: ${response.status} ${response.statusText}`);
      }
      
      const data = await response.json();
      
      // Check if results exist and is an array
      if (!data.results || !Array.isArray(data.results)) {
        console.warn('No movie results found or invalid response format');
        return [];
      }
      
      return data.results.slice(0, 10).map((movie) => ({
        title: movie.title || 'Título desconocido',
        author: movie.release_date ? movie.release_date.split('-')[0] : 'Año desconocido',
        year: movie.release_date ? movie.release_date.split('-')[0] : 'Año desconocido',
        description: '', // No description for movies
        cover: movie.poster_path ? `https://image.tmdb.org/t/p/w300${movie.poster_path}` : null
      }));
    } catch (error) {
      console.error('Error searching movies:', error);
      return [];
    }
  }

  function displaySearchResults(results, type) {
    const resultsContainer = document.getElementById('searchResults');
    if (!resultsContainer) return;
    if (results.length === 0) {
      let message = 'No se encontraron resultados';
      if (type === 'movie' && (!API_KEYS.TMDB_API_KEY || API_KEYS.TMDB_API_KEY === 'YOUR_TMDB_API_KEY_HERE')) {
        message = 'Búsqueda de películas no disponible. Configura tu API key de TMDB para habilitar la búsqueda de películas.';
      }
      resultsContainer.innerHTML = `<p class="no-results">${message}</p>`;
      return;
    }

    resultsContainer.innerHTML = results.map((item, index) => `
      <div class="search-result-item" data-index="${index}">
        <div class="result-content">
          ${item.cover ? `<img src="${item.cover}" alt="${item.title}" class="result-cover" />` : ''}
          <div class="result-info">
            <h4>${item.title}</h4>
            <p><strong>${type === 'book' ? 'Autor' : 'Año'}:</strong> ${item.author}</p>
            <p><strong>Año:</strong> ${item.year}</p>
            ${item.description ? `<p class="result-description">${item.description.substring(0, 150)}...</p>` : ''}
          </div>
        </div>
        <button class="add-from-search-btn" onclick="addFromSearch(${index}, '${type}')">
          Agregar
        </button>
      </div>
    `).join('');
  }

  // Modal functions
  function openSearchModal(type) {
    currentSearchType = type;
    const modal = document.getElementById('searchModal');
    if (!modal) return;
    const title = document.getElementById('searchModalTitle');
    if (!title) return;
    title.textContent = type === 'book' ? 'Buscar Libros' : 'Buscar Películas';
    modal.style.display = 'flex';
    const searchInputEl = document.getElementById('searchInput');
    if (searchInputEl) searchInputEl.value = '';
    const searchResultsEl = document.getElementById('searchResults');
    if (searchResultsEl) searchResultsEl.innerHTML = '';
  }

  function closeSearchModal() {
    const modal = document.getElementById('searchModal');
    if (modal) {
      modal.style.display = 'none';
    }
  }

  function openModal(type) {
    currentType = type;
    const modal = document.getElementById('addModal');
    if (!modal) return;
    const title = document.getElementById('modalTitle');
    if (!title) return;
    title.textContent = type === 'book' ? 'Agregar Libro' : 'Agregar Película';
    modal.style.display = 'flex';
    const addForm = document.getElementById('addForm');
    if (addForm) addForm.reset();
    resetStarRating();
  }

  function closeModal() {
    const modal = document.getElementById('addModal');
    if (modal) {
      modal.style.display = 'none';
    }
  }

  // Star rating functionality
  function resetStarRating() {
    const stars = document.querySelectorAll('.star');
    stars.forEach(star => star.classList.remove('active'));
    const itemRatingEl1 = document.getElementById('itemRating');
    if (itemRatingEl1) itemRatingEl1.value = '0';
    
    // Debug log
    console.log('Reset star rating to 0');
  }

  function setStarRating(rating) {
    const stars = document.querySelectorAll('.star');
    stars.forEach((star, index) => {
      if (index < rating) {
        star.classList.add('active');
      } else {
        star.classList.remove('active');
      }
    });
    const itemRatingEl2 = document.getElementById('itemRating');
    if (itemRatingEl2) itemRatingEl2.value = rating.toString();
    
    // Debug log to help troubleshoot
    console.log('Setting star rating to:', rating);
  }

  // Global variables for search results
  let searchResults = [];

  // Event listeners
  document.addEventListener('DOMContentLoaded', () => {
    loadItems();

    // Add buttons
    document.querySelectorAll('.add-btn').forEach(btn => {
      btn.addEventListener('click', (e) => {
        const target = e.target;
        if (target && target.dataset.type) {
          openModal(target.dataset.type);
        }
      });
    });

    // Search buttons
    document.querySelectorAll('.search-btn').forEach(btn => {
      btn.addEventListener('click', (e) => {
        const target = e.target;
        if (target && target.dataset.type) {
          openSearchModal(target.dataset.type);
        }
      });
    });

    // Modal controls
    const closeModalBtn = document.getElementById('closeModal');
    if (closeModalBtn) closeModalBtn.addEventListener('click', closeModal);
    const closeSearchModalBtn = document.getElementById('closeSearchModal');
    if (closeSearchModalBtn) closeSearchModalBtn.addEventListener('click', closeSearchModal);
    const cancelBtn = document.getElementById('cancelBtn');
    if (cancelBtn) cancelBtn.addEventListener('click', closeModal);
    const logoutBtn = document.getElementById('logoutBtn');
    if (logoutBtn) logoutBtn.addEventListener('click', () => {
      sessionStorage.removeItem('adminLoggedIn');
      window.location.href = '/admin';
    });

    // Search functionality
    const searchBtn = document.getElementById('searchBtn');
    if (searchBtn) {
      searchBtn.addEventListener('click', async () => {
        const searchInput = document.getElementById('searchInput');
        const query = searchInput ? searchInput.value.trim() : '';
        if (!query) return;

        const resultsContainer = document.getElementById('searchResults');
        if (!resultsContainer) return;
        resultsContainer.innerHTML = '<p class="loading">Buscando...</p>';

        try {
          let results = [];
          if (currentSearchType === 'book') {
            results = await searchBooks(query);
          } else if (currentSearchType === 'movie') {
            results = await searchMovies(query);
          }
          searchResults = results;
          displaySearchResults(results, currentSearchType);
        } catch (error) {
          resultsContainer.innerHTML = '<p class="error">Error en la búsqueda</p>';
        }
      });
    }

    // Search on Enter key
    const searchInput = document.getElementById('searchInput');
    if (searchInput) {
      searchInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') {
          const searchBtn = document.getElementById('searchBtn');
          if (searchBtn) searchBtn.click();
        }
      });
    }

    // Star rating functionality
    document.querySelectorAll('.star').forEach((star, index) => {
      star.addEventListener('click', () => {
        console.log('Star clicked:', index + 1);
        setStarRating(index + 1);
      });
      star.addEventListener('mouseover', () => {
        for (let i = 0; i <= index; i++) {
          document.querySelectorAll('.star')[i].classList.add('hover');
        }
      });
      star.addEventListener('mouseout', () => {
        document.querySelectorAll('.star').forEach(s => s.classList.remove('hover'));
      });
    });

    // Form submission
    const addForm = document.getElementById('addForm');
    if (addForm) {
      addForm.addEventListener('submit', (e) => {
        e.preventDefault();
        const form = e.target;
        const formData = new FormData(form);
        const item = {
          title: formData.get('title'),
          author: formData.get('author'),
          year: formData.get('year'),
          description: formData.get('description'),
          rating: formData.get('rating'),
          cover: formData.get('cover')
        };
        
        console.log('Saving item with rating:', item.rating);

        // Check if we're in edit mode
        const editIndex = form.dataset.editIndex;
        const editType = form.dataset.editType;
      
      if (editIndex !== undefined && editType) {
        // Edit existing item
        const index = parseInt(editIndex, 10);
        const typeItems = getItemsByType(editType);
        if (typeItems && typeItems[index]) {
          typeItems[index] = item;
          setItemsByType(editType, typeItems);
          localStorage.setItem(`admin${editType === 'book' ? 'Books' : 'Movies'}`, JSON.stringify(typeItems));
        }
      } else {
        // Add new item
        const typeItems = getItemsByType(currentType);
        typeItems.push(item);
        setItemsByType(currentType, typeItems);
        localStorage.setItem(`admin${currentType === 'book' ? 'Books' : 'Movies'}`, JSON.stringify(typeItems));
      }
      
      // Clear edit mode
      delete form.dataset.editIndex;
      delete form.dataset.editType;
      
        loadItems();
        closeModal();
      });
    }
  });

  // Global functions for item management
  (window as any).editItem = function(type, index) {
    const typeItems = getItemsByType(type);
    // Check if the item exists and the array is valid
    if (!typeItems || !typeItems[index]) {
      console.error('Item not found:', type, index);
      return;
    }
    
    const item = typeItems[index];
    openModal(type);
    
    // Set form values
    const titleEl = document.getElementById('itemTitle');
    if (titleEl) titleEl.value = item.title || '';
    const authorEl = document.getElementById('itemAuthor');
    if (authorEl) authorEl.value = item.author || '';
    const yearEl = document.getElementById('itemYear');
    if (yearEl) yearEl.value = item.year || '';
    const descEl = document.getElementById('itemDescription');
    if (descEl) descEl.value = item.description || '';
    const ratingEl = document.getElementById('itemRating');
    if (ratingEl) ratingEl.value = item.rating || '0';
    const coverEl = document.getElementById('itemCover');
    if (coverEl) coverEl.value = item.cover || '';
    
    // Set star rating with proper validation
    const rating = parseInt(item.rating || '0', 10) || 0;
    console.log('Editing item with rating:', item.rating, 'parsed as:', rating);
    // Wait a bit for the modal to be fully rendered before setting stars
    setTimeout(() => {
      setStarRating(rating);
    }, 100);
    
    // Mark form as edit mode
    const addForm = document.getElementById('addForm');
    if (addForm) {
      addForm.dataset.editIndex = index.toString();
      addForm.dataset.editType = type;
    }
  };

  (window as any).deleteItem = function(type, index) {
    const typeItems = getItemsByType(type);
    // Check if the array exists and the index is valid
    if (!typeItems || index < 0 || index >= typeItems.length) {
      console.error('Invalid delete operation:', type, index);
      return;
    }
    
    if (confirm('¿Estás seguro de que quieres eliminar este item?')) {
      typeItems.splice(index, 1);
      setItemsByType(type, typeItems);
      localStorage.setItem(`admin${type === 'book' ? 'Books' : 'Movies'}`, JSON.stringify(typeItems));
      loadItems();
    }
  };

  (window as any).addFromSearch = function(index, type) {
    const item = searchResults[index];
    if (item) {
      const newItem = {
        title: item.title,
        author: type === 'book' ? item.author : item.author,
        year: item.year,
        description: item.description || '',
        rating: '0',
        cover: item.cover || ''
      };
      const typeItems = getItemsByType(type);
      typeItems.push(newItem);
      setItemsByType(type, typeItems);
      localStorage.setItem(`admin${type === 'book' ? 'Books' : 'Movies'}`, JSON.stringify(typeItems));
      loadItems();
      closeSearchModal();
    }
  };
</script>

<style>
  .dashboard {
    max-width: 1200px;
    margin: 0 auto;
  }

  .dashboard-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 2rem;
    padding-bottom: 1rem;
    border-bottom: 1px solid var(--border-color);
  }

  .dashboard-header h1 {
    color: var(--text-color);
    font-size: 2rem;
    font-weight: 600;
  }

  .logout-btn {
    background: #;
    border: none;
    padding: 0.5rem 1rem;
    border-radius: 6px;
    cursor: pointer;
    font-size: 0.9rem;
    transition: background-color 0.2s ease;
  }

  .logout-btn:hover {
    background: var(--border-color);
  }

  .dashboard-grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 2rem;
  }

  .dashboard-section {
    background: var(--card-bg);
    border: 1px solid var(--border-color);
    border-radius: 12px;
    padding: 1.5rem;
  }

  .section-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
      }

  .section-header h2 {
    color: var(--text-color);
    font-size: 1.25rem;
    font-weight: 600;
  }

  .header-actions {
    display: flex;
    gap: 0.5rem;
  }

  .add-btn {
    background: var(--border-color);
    border: none;
    padding: 0.5rem 1rem;
    border-radius: 6px;
    cursor: pointer;
    font-size: 0.9rem;
    transition: background-color 0.2s ease;
  }

  .search-btn {
    background: var(--border-color);
    border: none;
    padding: 0.5rem 1rem;
    border-radius: 6px;
    cursor: pointer;
    font-size: 0.9rem;
    transition: background-color 0.2s ease;
  }


  .items-list {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .item-card {
    background: var(--bg-color);
    border: 1px solid var(--border-color);
    border-radius: 8px;
    padding: 1rem;
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
  }

  .item-info h4 {
    color: var(--text-color);
    font-size: 1rem;
    font-weight: 600;
    margin-bottom: 0.5rem;
  }

  .item-info p {
    color: var(--text-color);
    font-size: 0.85rem;
    margin-bottom: 0.25rem;
  }

  .item-actions {
    display: flex;
    gap: 0.5rem;
  }

  .edit-btn, .delete-btn {
    padding: 0.25rem 0.75rem;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 0.5rem;
    transition: background-color 0.2s ease;
  }

  .edit-btn {
    background: #17a2b8;
    color: white;
  }

  .edit-btn:hover {
    background: #138496;
  }

  .delete-btn {
    background: #dc3545;
    color: white;
  }

  .delete-btn:hover {
    background: #c82333;
  }

  /* Modal styles */
  .modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 1000;
  }

  .modal-content {
    background: var(--card-bg);
    border-radius: 12px;
    padding: 1.5rem;
    width: 90%;
    max-width: 500px;
    max-height: 90vh;
    overflow-y: auto;
  }

  .modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1.5rem;
  }

  .modal-header h3 {
    color: var(--text-color);
    font-size: 1.25rem;
    font-weight: 600;
  }

  .close-btn {
    background: none;
    border: none;
    font-size: 1.5rem;
    cursor: pointer;
    color: var(--text-color);
  }

  .form-group {
    margin-bottom: 1rem;
  }

  .form-group label {
    display: block;
    color: var(--text-color);
    font-size: 0.9rem;
    font-weight: 500;
    margin-bottom: 0.5rem;
  }

  .form-group input,
  .form-group textarea {
    width: 100%;
    padding: 0.75rem;
    border: 1px solid var(--border-color);
    border-radius: 6px;
    background: var(--bg-color);
    color: var(--text-color);
    font-size: 0.9rem;
  }

  .form-group input:focus,
  .form-group textarea:focus {
    outline: none;
    border-color: var(--accent-color);
  }

  .form-actions {
    display: flex;
    gap: 1rem;
    justify-content: flex-end;
    margin-top: 1.5rem;
  }

  .cancel-btn, .save-btn {
    padding: 0.75rem 1.5rem;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    font-size: 0.9rem;
    transition: background-color 0.2s ease;
  }

  .cancel-btn {
    background: #6c757d;
    color: white;
  }

  .cancel-btn:hover {
    background: #5a6268;
  }

  .save-btn {
    background: var(--accent-color);
    color: white;
  }

  .save-btn:hover {
    background: var(--accent-hover, #0056b3);
  }

  /* Star Rating Styles */
  .star-rating {
    display: flex;
    gap: 0.25rem;
    margin-top: 0.5rem;
  }

  .star {
    font-size: 1.5rem;
    color: #ddd;
    cursor: pointer;
    transition: color 0.2s ease;
    user-select: none;
  }

  .star.active,
  .star.hover {
    color: #ffc107;
  }

  /* Search Modal Styles */
  .search-container {
    margin-top: 1rem;
  }

  .search-input-group {
    display: flex;
    gap: 0.5rem;
    margin-bottom: 1rem;
  }

  .search-input-group input {
    flex: 1;
    padding: 0.75rem;
    border: 1px solid var(--border-color);
    border-radius: 6px;
    background: var(--bg-color);
    color: var(--text-color);
    font-size: 0.9rem;
  }

  .search-input-group input:focus {
    outline: none;
    border-color: var(--text-color);
  }

  .search-submit-btn {
    background: var(--border-color);
    border: none;
    padding: 0.75rem 1.5rem;
    border-radius: 6px;
    cursor: pointer;
    font-size: 0.9rem;
    transition: background-color 0.2s ease;
  }

  .search-results {
    max-height: 400px;
    overflow-y: auto;
    border: 1px solid var(--border-color);
    border-radius: 6px;
    padding: 1rem;
    background: var(--bg-color);
  }

  .search-result-item {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    padding: 1rem;
    border-bottom: 1px solid var(--border-color);
    gap: 1rem;
  }

  .search-result-item:last-child {
    border-bottom: none;
  }

  .result-content {
    display: flex;
    gap: 1rem;
    flex: 1;
  }

  .result-cover {
    width: 60px;
    height: 90px;
    object-fit: cover;
    border-radius: 4px;
    flex-shrink: 0;
  }

  .result-info h4 {
    color: var(--text-color);
    font-size: 1rem;
    font-weight: 600;
    margin-bottom: 0.5rem;
  }

  .result-info p {
    color: var(--text-color);
    font-size: 0.85rem;
    margin-bottom: 0.25rem;
  }

  .result-description {
    color: #888 !important;
    font-style: italic;
  }

  .add-from-search-btn {
    background: #28a745;
    color: white;
    border: none;
    padding: 0.5rem 1rem;
    border-radius: 4px;
    cursor: pointer;
    font-size: 0.85rem;
    transition: background-color 0.2s ease;
    flex-shrink: 0;
  }

  .add-from-search-btn:hover {
    background: #218838;
  }

  .loading, .error, .no-results {
    text-align: center;
    padding: 2rem;
    color: var(--text-color);
    font-style: italic;
  }

  .error {
    color: #dc3545;
  }

  .item-cover-mini {
    width: 48px;
    height: 72px;
    object-fit: cover;
    border-radius: 0.25rem;
    margin-right: 0.75rem;
    background: #f3f3f3;
    border: 1px solid #eee;
  }

  .item-rating-static {
    margin-top: 8px;
  }

  .star-static {
    font-size: 1.2rem;
    color: #ccc;
  }

  .star-static.active {
    color: #ffd700;
  }

  @media (max-width: 768px) {
    .dashboard-grid {
      grid-template-columns: 1fr;
    }
    
    .dashboard-header {
      flex-direction: column;
      gap: 1rem;
      align-items: flex-start;
    }
    
    .item-card {
      flex-direction: column;
      gap: 1rem;
    }
    
    .item-actions {
      align-self: flex-end;
    }
  }
</style>
