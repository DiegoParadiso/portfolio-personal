

<form class="login-form" id="loginForm">
  <div class="form-group">
    <label for="username">Usuario</label>
    <input 
      type="text" 
      id="username" 
      name="username" 
      required 
      placeholder="Ingresa tu usuario"
    />
  </div>
  
  <div class="form-group">
    <label for="password">Contrase침a</label>
    <input 
      type="password" 
      id="password" 
      name="password" 
      required 
      placeholder="Ingresa tu contrase침a"
    />
  </div>
  
  <button type="submit" class="login-btn">
    Iniciar Sesi칩n
  </button>
  
  <div id="error-message" class="error-message" style="display: none;">
    Usuario o contrase침a incorrectos
  </div>
</form>

<script>
  // Simple authentication - you can replace with your preferred method
  const form = document.getElementById('loginForm');
  const errorMessage = document.getElementById('error-message');
  
  form.addEventListener('submit', async (e) => {
    e.preventDefault();
    if (!form) return;

    const formData = new FormData(form);
    const username = formData.get('username');
    const password = formData.get('password');
    
    // Debug log para desarrollo
    console.log('Login POST data:', { username, password });

    // Verifica que no sean null ni undefined
    if (typeof username !== 'string' || typeof password !== 'string') {
      if (errorMessage) {
        errorMessage.style.display = 'block';
        setTimeout(() => { errorMessage.style.display = 'none'; }, 3000);
      }
      return;
    }

    try {
      const resp = await fetch('/api/login', {
        method: 'POST',
        headers: {'Content-Type':'application/json'},
        body: JSON.stringify({ username, password }),
      });
      if (resp.ok) {
        sessionStorage.setItem('adminLoggedIn', 'true');
        window.location.href = '/admin/dashboard';
      } else if (errorMessage) {
        errorMessage.style.display = 'block';
        setTimeout(() => {
          errorMessage.style.display = 'none';
        }, 3000);
      }
    } catch {
      if (errorMessage) {
        errorMessage.style.display = 'block';
        setTimeout(() => {
          errorMessage.style.display = 'none';
        }, 3000);
      }
    }
  });
</script>

<style>
  .login-form {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }

  .form-group {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .form-group label {
    color: var(--text-color);
    font-size: 0.9rem;
    font-weight: 500;
  }

  .form-group input {
    padding: 0.75rem;
    border: 1px solid var(--border-color);
    border-radius: 6px;
    background: var(--bg-color);
    color: var(--text-color);
    font-size: 0.9rem;
    transition: border-color 0.2s ease;
  }

  .form-group input:focus {
    outline: none;
    border-color: var(--accent-color);
  }

  .login-btn {
    background: var(--border-color);
    border: none;
    padding: 0.75rem 1.5rem;
    font-size: 0.9rem;
    font-weight: 500;
    cursor: pointer;
    transition: background-color 0.2s ease;
  }

  .error-message {
    color: #dc3545;
    font-size: 0.85rem;
    text-align: center;
    padding: 0.5rem;
    background: rgba(220, 53, 69, 0.1);
    border: 1px solid rgba(220, 53, 69, 0.2);
  }
</style>
